@page "/{word}"
@inject HttpClient Http
@using Models
@using Services;
@inject DefinitionService DefinitionService
@using ZXing;

<div class="animate__animated animate__fadeIn">
    <MudItem xs="12" Style="margin: 20px 80px;">

    @if (definition != null)
    {
        <MudText Color="Color.Primary" Typo="Typo.h2" Align="Align.Center">@definition.Title</MudText>
        <div style="text-align: center; margin: 20px;">
            <MudBarcode @ref="_barcode" @bind-Value="word" Width="100" Height="100" BarcodeFormat="BarcodeFormat.QR_CODE" Color="black" />
        </div>

        @if (definition.Tags != null)
        {
            <div style="text-align: justify; margin: 20px">
                @foreach (var tag in definition.Tags)
                {
                    <MudChip Color="Color.Primary">@tag.Name</MudChip>
                    <MudChip Color="Color.Secondary">@tag.Category</MudChip>
                }
            </div>
        }

        if (definition.HtmlDef != null)
        {
            <MudText Typo="Typo.h5" Align="Align.Center" Style="text-align: justify; margin: 20px">
                @((MarkupString)definition.HtmlDef)
            </MudText>
        }

        if (definition.Refs != null)
        {
             <div style="text-align: justify; margin: 20px">
                @foreach (var r in definition.Refs)
                {
                    <MudChip Color="Color.Primary" Href="@r.Url" Style="text-align: justify;">@r.Title</MudChip>
                }
            </div>
        }

        if (definition.Imgs != null)
        {
            <div style="display: flex; justify-content: center; margin: 20px ">
                <MudGallery ImageSource="imageSource()" ItemPerLine="5" MaxWidth="MaxWidth.Large"></MudGallery>
            </div>
        }

    }

</MudItem>
</div>
@code {

    [Parameter]
    public string word { get; set; }
    private MudBarcode? _barcode;
    private Definition? definition;

    protected override async Task OnParametersSetAsync()
    {
        await DefinitionService.LoadDefinitionsAsync();
        var definitions = DefinitionService.Definitions;
        if (definitions!=null)
            definition = definitions.FirstOrDefault(d => d.Key == word);
    }

    private List<string> imageSource()
    {
        return definition.Imgs.Select(i=>i.Url).ToList();
    }

}
