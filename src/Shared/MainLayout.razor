@inherits LayoutComponentBase
@using Models
@using Services;
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject DefinitionService DefinitionService
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<MudThemeProvider Theme="_theme" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudContainer MaxWidth="MaxWidth.ExtraLarge" Style="margin-top: 15px;">
        <MudGrid>
            
            <MudItem xs="12" sm="4" md="3" Style="display: flex; justify-content: center;" >
                <embed src="imgs/apipedia_logo.svg" style="width: 85%; filter: drop-shadow(3px 3px 3px black);" />
                <div style="position: absolute; width: 100%; height: 100%; cursor: pointer;" @onclick="NavigateToRoot"></div>
            </MudItem>
            
            <MudItem xs="12" sm="4" md="6" Style="display: flex; justify-content: center; align-items: center;">
                <MudAutocomplete @ref="autoComplete" ResetValueOnEmptyText="true" @onclick="()=>autoComplete!.Clear()" ToStringFunc="(x)=> x.Title" ValueChanged="NavigateToKey" T="Definition" SearchFunc="SearchDefinition" Margin="Margin.Dense" Variant="Variant.Outlined" Placeholder="Buscar" Adornment="Adornment.End" AdornmentIcon="fa-solid fa-magnifying-glass" AdornmentColor="Color.Primary">
                    <ItemTemplate>
                        @{
                            <div style="display: flex; justify-content: space-between;">
                                <strong>@context.Title</strong>
                                <em style="text-align: right;">@context.Summary</em>
                            </div>
                        }
                    </ItemTemplate>
                </MudAutocomplete>
            </MudItem>
        </MudGrid>
    </MudContainer>
    <MudMainContent Style="padding: 2%;">
        @Body
    </MudMainContent>
    <MudAppBar Fixed="true" Bottom="true" Style="@("background: transparent; box-shadow: none;")">
        <MudItem>
            <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Href="https://github.com/apiaddicts" Target="_blank"></MudIconButton>
        </MudItem>
        <MudHidden Breakpoint="Breakpoint.SmAndDown">
        <MudItem>
            <MudIconButton Icon="@Icons.Custom.Brands.YouTube" Href="https://www.youtube.com/channel/UCepaRmZBCmbdU4QqNhSV5jQ" Target="_blank"></MudIconButton>
        </MudItem>
        <MudItem>
            <MudIconButton Icon="fa-brands fa-x-twitter" Href="https://twitter.com/APIAddicts" Target="_blank"></MudIconButton>
        </MudItem>
        <MudItem>
            <MudIconButton Icon="@Icons.Custom.Brands.LinkedIn" Href="https://www.linkedin.com/company/apiaddicts/" Target="_blank"></MudIconButton>
        </MudItem>
        </MudHidden>
        <MudSpacer></MudSpacer>
        <MudItem>
            <MudToggleIconButton Toggled="_isDarkMode" ToggledChanged="ToggleDarkMode" Icon="fa-solid fa-moon" ToggledIcon="fa-solid fa-sun" ToggledColor="@Color.Warning" Color="@Color.Dark" Edge="Edge.End" />
        </MudItem>
    </MudAppBar>
</MudLayout>



@code {
    private bool _isDarkMode;
    private MudTheme? _theme;
    public List<Definition>? Definitions { get; private set; }
    MudAutocomplete<Definition>? autoComplete;

    protected override async Task OnInitializedAsync()
    {
        _isDarkMode = await localStorage.GetItemAsync<bool>("darkmode");
        _theme = _isDarkMode ? GenerateDarkTheme() : GenerateLightTheme();
        await DefinitionService.LoadDefinitionsAsync();
        Definitions = DefinitionService.Definitions;
       
    }

    private async Task ToggleDarkMode(bool isDarkMode)
    {
        _isDarkMode = isDarkMode;
        await localStorage.SetItemAsync<bool>("darkmode", _isDarkMode);
        _theme = _isDarkMode ? GenerateDarkTheme() : GenerateLightTheme();
        StateHasChanged();
    }

    public async Task NavigateApiaddicts()
    {
        await NavigateUrl("https://www.apiaddicts.org/");
    }

    public async Task NavigateUrl(string url)
    {
        await JS.InvokeVoidAsync("open", url, "_blank");
    }

    public async Task NavigateGithub()
    {
        await NavigateUrl("https://github.com/apiaddicts");
    }

    private async Task<IEnumerable<Definition>> SearchDefinition(string value)
    {
        if (string.IsNullOrEmpty(value))
            return Definitions!;
        return Definitions!.Where(x => x.Title.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private void NavigateToKey(Definition value)
    {
        if (value != null)
        {
            NavigationManager.NavigateTo($"def/{value.Key}");
        }
        
    }

    private void NavigateToRoot()
    {
        autoComplete!.Clear();
        NavigationManager.NavigateTo("");
    }


    private MudTheme GenerateLightTheme() =>
    new MudTheme
        {
            Palette = new PaletteLight()
            {
                Primary = "#00BCD4",
                Secondary = "#FD8E18",
                Tertiary = "#878787",
            },
            Typography = new Typography()
            {
                Default = new Default()
                {
                    FontFamily = new[] { "Karla" }
                }
            }
        };

    private MudTheme GenerateDarkTheme() =>
        new MudTheme
            {
                Palette = new PaletteDark()
                {
                    Primary = "#00BCD4",
                    Secondary = "#FD8E18",
                    Tertiary = "#878787",
                },
                Typography = new Typography()
                {
                    Default = new Default()
                    {
                        FontFamily = new[] { "Karla" }
                    }
                }
            };

}